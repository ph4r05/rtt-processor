#!/usr/bin/python3


class CfgDefaults:
    # def confs
    config_base = {
        'notes': 'generated by generator.py',
        'seed': '1fe40505e131963c',  # default seed
        'tv-size': None,
        'tv-count': None
    }
    counter_stream = {
        'type': 'counter'
    }
    hw_stream = {
        'type': 'hw_counter',
        'hw': 4
    }
    random_stream = {
        'type': 'pcg32_stream'
    }
    false_stream = {
        'type': 'false_stream'
    }
    rnd_plt_ctx_stream = {
        'type': 'rnd_plt_ctx_stream',
        'source': None
    }
    sac_stream = {
        'type': 'sac'
    }
	
	#xor with fixed random byte [stream_block1       , stream_block2,...  ] XOR 
	#		            [[000000... randByte], [000000... sameByte]]
	#randByte depends on seed (pcg32 gen)
    def hash_hack(input_size, stream_type):
        return {
            "source": {
                "type": "xor_stream",
                "source": {
                    "type": "tuple_stream",
                    "sources": [
                        {
                            **stream_type,
                            "output_size": input_size
                        },
                        {
                            "type": "single_value_stream",
                            "output_size": input_size,
                            "source": {
                                "type": "tuple_stream",
                                "sources": [
                                    {
                                        "type": "false_stream",
                                        "output_size": input_size - 1
                                    },
                                    {
                                        "type": "pcg32_stream",
                                        "output_size": 1
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }



class FunArgs:
    def __init__(self, block_size, key_size, iv_size=None, rounds=()):
        self.block_size = block_size
        self.key_size = key_size
        self.iv_size = iv_size
        self.rounds = rounds

